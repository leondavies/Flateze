generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  flatMembers FlatMember[]
  payments Payment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Flat {
  id          String   @id @default(cuid())
  name        String
  address     String?
  emailAlias  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members FlatMember[]
  bills   Bill[]

  @@map("flats")
}

model FlatMember {
  id     String @id @default(cuid())
  flatId String @map("flat_id")
  userId String @map("user_id")
  role   MemberRole @default(MEMBER)
  joinedAt DateTime @default(now())

  flat Flat @relation(fields: [flatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([flatId, userId])
  @@map("flat_members")
}

model Bill {
  id            String   @id @default(cuid())
  flatId        String   @map("flat_id")
  companyName   String   @map("company_name")
  billType      BillType @map("bill_type")
  amount        Decimal  @db.Decimal(10, 2)
  dueDate       DateTime @map("due_date")
  billDate      DateTime @map("bill_date")
  referenceId   String?  @map("reference_id")
  status        BillStatus @default(PENDING)
  emailSubject  String?  @map("email_subject")
  emailBody     String?  @db.Text @map("email_body")
  attachmentUrl String?  @map("attachment_url")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  flat     Flat      @relation(fields: [flatId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("bills")
}

model Payment {
  id        String   @id @default(cuid())
  billId    String   @map("bill_id")
  userId    String   @map("user_id")
  amount    Decimal  @db.Decimal(10, 2)
  paidAt    DateTime @default(now()) @map("paid_at")
  method    PaymentMethod @default(OTHER)
  notes     String?

  bill Bill @relation(fields: [billId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum BillType {
  ELECTRICITY
  GAS
  WATER
  INTERNET
  RENT
  INSURANCE
  OTHER
}

enum BillStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  PAYPAL
  VENMO
  OTHER
}
